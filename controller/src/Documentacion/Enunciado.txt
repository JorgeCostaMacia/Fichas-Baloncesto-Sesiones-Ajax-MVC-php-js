EJERCICIOS NAVIDADVamos  a crear una base de datos más compleja. Llamaremos a la base de datos baloncesto.Contiene una tabla jugadores con los siguientes campos: id, nombre, posicion, partidos, puntos, rebotes, asistencias.1º. Inserta en la tabla jugadores los datos de los siguientes jugadores. • Valero - base - 24 partidos - 5.2 puntos - 1.7 rebotes - 9.8 asistencias. • Juanfran - base - 29 partidos - 6.1 puntos - 0.8 rebotes - 5.8 asistencias. • Montilla - escolta - 19 partidos - 11.7 puntos - 2.7 rebotes - 2.4 asistencias • Rodriguez - escolta - 23 partidos - 17.1 puntos - 1.8 rebotes - 3.7 asistencias. • Stipes - escolta - 31 partidos - 8.5 puntos - 3.1 rebotes - 0.9 asistencias. • Montes - alero - 32 partidos - 13.1 puntos - 4.6 rebotes - 4.1 asistencias. • Volkov - ala pivot - 11 partidos - 4.3 puntos - 5.6 rebotes -1.3 asistencias. • Suarez - ala pivot - 24 partidos - 6.9 puntos - 4.8 rebotes - 4.5 asistencias. • Carter - ala pivot - 26 partidos - 26.1 puntos - 9.1 rebotes - 1.8 asistencias • Graham - pivot - 17 partidos - 2.1 puntos - 8.4 rebotes - 0.2 asistencias. • Cesar - pivot - 8 partidos - 3.1 puntos -6.8 rebotes - 0.7 asistencias. Ten en cuenta que los datos de puntos, rebotes y asistencias son datos medios, NO TOTALES.Vamos a realizar una aplicación para acceder a los datos de nuestra liga y de los jugadores, para ello primero tendré que loguearme y podré entrar en la aplicación donde tendré todas las opciones que se listan a continuación.Ten en cuenta que debo controlar mediante sesiones que me haya logueado y la página debe estar diseñada en función de los criterios de modularidad vistos en clase.3º. Extrae estadísticas de los jugadores:• Punto de Menú Los mejores (mejores.php):  Muestre los jugadores que:o Jugadores que han anotado más de 12 puntos. o Jugadores que han cogido más de 6 rebotes. o Jugadores que han dado más de 5 asistencias.• Punto de Menú Destacados Por posición. Veamos los jugadores que destacan en su posición (mejores_posicion.php): o Bases que dan más de 8 asistencias por partido. o Escoltas o aleros que anotan más de 15 puntos por partido. o Ala pivots o pivots que cogen más de 7 rebotes por partido. 4º.  Ahora debemos añadir:• Punto de Menú Ver Jugadores (jugadores.php): listado de los nombres de los jugadores ordenados por posiciones de juego. Cada nombre tiene un enlace a ficha.php • Sin punto de Menú (ficha.php): la ficha de un jugador con sus estadísticas personales. Además tendrá un botón para modificar la información y otro para borrar el jugador.• Sin punto de Menú  (cant_partidos.php): muestra un listado de los jugadores ordenados por partidos jugados. • Sin punto de Menú (cant_puntos.php): muestra un listado de los jugadores ordenados de por puntos anotados por partido. • Sin punto de Menú  (cant_rebotes.php): muestra un listado de los jugadores ordenados de por rebotes capturados por partido. •  Sin punto de Menú  (cant_asistencias.php): muestra un listado de los jugadores ordenados de por asistencias dadas por partido. •  Punto de Menú  Ver estadísticas (ver_estadisticas.php): Necesitamos un punto de menú en el cual pueda ver estadísticas ordenadas en función de los siguiente criterios:  jugadores ordenados de más a menos en cuanto a partidos jugados, puntos, rebotes y asistencias   En función de lo que elija me mostrará los datos de los jugadores de mayor a menor en cantidad de puntos, rebotes....Por supuesto hay que aprovechar todos las  página anterioresNOTA: Las páginas marcadas con la opción Punto de Menú, son aquellas que podrán ser accesibles a través de un punto del menú en la capa menú. Las páginas que están marcadas con Sin punto de menú, no tendrán su propio punto de menú, y por tanto serán accesibles a través de otras páginas que sí lo tengan.Se recomienda hacer un esquema de la estructura de las páginas5º. Estaría bien que se pudieran gestionar las fichas desde la propia web.Para ello hay que agregar los formularios: • Punto de Menú Nuevo Jugador (nueva_ficha.php): formulario para añadir un jugador y sus datos. • Sin punto de Menú (guardar_ficha.php): el script que guarda los datos que provienen del script anterior. De paso añadir  a Jofre - alero, Lehman - ala pivot y a Stevenson - Pivot. Sus estadísticas iniciales están a 0. • borrar_ficha.php: el script que borra la ficha de un jugador. Esto se podrá acceder desde la página ficha.php• Actualizar_ficha.php: Script que actualiza la información del jugador. Este se podrá acceder desde ficha.php.Añadir las páginas necesarias demás con los nombre que consideréis necesarios6º Añadir un formulario para subir el acta de un partido, y que la aplicación recogiera ese acta, y actualizara las estadísticas de los jugadores.Tendremos un punto de menú llamado Subir Acta (subir_acta.php)El acta es un archivo que contiene una línea por cada jugador que ha participado con los siguientes datos (los jugadores que no figuran en el acta es porque no han salido al campo): nombre del jugador, puntos, rebotes, asistencias; Un fichero de acta podría ser el siguiente: Valero, 17, 6, 4; Juanfran, 8, 1, 11; Montilla, 12, 4, 2; Volkov, 7, 7, 0; Carter, 2, 4, 0; Stipes, 23, 0, 3; Cesar, 9, 2, 2; Montes, 11, 3, 1; Este proceso es algo complicado. Vamos a detallar los pasos que vamos a seguir. • Un formulario “subir_acta.php” que permite subir un archivo con un acta. • El destino de la página “subir_acta.php” es la página “recoger_acta.php”. Ésta realiza todo el trabajo. o Primero guarda el archivo temporal en una carpeta actas. o Segundo abre el archivo con el acta y lee los datos y los guarda en variables. o Por cada jugador que aparece en el acta lee los datos de la base de datos. o Calcula la estadística actualizada para cada categoría. Por ejemplo: <?php// Codigo anterior… $partidos_ahora = $partidos_antes + 1; $puntos_antes = $puntos_por_partido_antes * $partidos_antes; $puntos_ahora = $puntos_antes + $puntos_ultimo_partido; $puntos_por_partido_ahora = $puntos_ahora / $partidos_ahora; // Codigo posterior… ?> • Finalmente actualiza los datos de cada jugador en la base de datos. Es altamente recomendable usar arrays asociativos para almacenar los datos y extraer el código que se usa varias veces a funciones para que el código quede más limpio y ordenado7º Un punto de menú para salir de la aplicación (logout.php)